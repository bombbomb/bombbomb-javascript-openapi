/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BBWebHook'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BBWebHook'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.WebhooksApi = factory(root.Bombbomb.ApiClient, root.Bombbomb.BBWebHook);
  }
}(this, function(ApiClient, BBWebHook) {
  'use strict';

  /**
   * Webhooks service.
   * @module api/WebhooksApi
   * @version 2.0.25798
   */

  /**
   * Constructs a new WebhooksApi. 
   * @alias module:api/WebhooksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addWebHook operation.
     * @callback module:api/WebhooksApi~addWebHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BBWebHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Webhook
     * Idempotently adds a Webhook url
     * @param {String} hookUrl The Url of your listener
     * @param {module:api/WebhooksApi~addWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BBWebHook}
     */
    this.addWebHook = function(hookUrl, callback) {
      var postBody = null;

      // verify the required parameter 'hookUrl' is set
      if (hookUrl === undefined || hookUrl === null) {
        throw new Error("Missing the required parameter 'hookUrl' when calling addWebHook");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'hookUrl': hookUrl
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = BBWebHook;

      return this.apiClient.callApi(
        '/webhook', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebHook operation.
     * @callback module:api/WebhooksApi~deleteWebHookCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes Webhook
     * Deletes a Webhook
     * @param {String} hookId The id of the webhook to delete
     * @param {module:api/WebhooksApi~deleteWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteWebHook = function(hookId, callback) {
      var postBody = null;

      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling deleteWebHook");
      }


      var pathParams = {
        'hookId': hookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/webhook/{hookId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebHooks operation.
     * @callback module:api/WebhooksApi~getWebHooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BBWebHook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Webhooks
     * Lists all registered Webhooks
     * @param {module:api/WebhooksApi~getWebHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BBWebHook>}
     */
    this.getWebHooks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = [BBWebHook];

      return this.apiClient.callApi(
        '/webhook/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listWebHookEvents operation.
     * @callback module:api/WebhooksApi~listWebHookEventsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe WebHook Events
     * Returns example Webhook events for each kind of possible event.
     * @param {module:api/WebhooksApi~listWebHookEventsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.listWebHookEvents = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/webhook/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendWebhookExample operation.
     * @callback module:api/WebhooksApi~sendWebhookExampleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends test Webhook
     * Triggers a test webhook to be sent to your endpoints.
     * @param {module:api/WebhooksApi~sendWebhookExampleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendWebhookExample = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/webhook/test', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
