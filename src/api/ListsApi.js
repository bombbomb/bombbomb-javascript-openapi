/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.ListsApi = factory(root.Bombbomb.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Lists service.
   * @module api/ListsApi
   * @version 2.0.0
   */

  /**
   * Constructs a new ListsApi. 
   * @alias module:api/ListsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addNewList operation.
     * @callback module:api/ListsApi~addNewListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add list.
     * Add a list to the users account.
     * @param {String} listName Name of the new list being added
     * @param {module:api/ListsApi~addNewListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addNewList = function(listName, callback) {
      var postBody = null;

      // verify the required parameter 'listName' is set
      if (listName == undefined || listName == null) {
        throw "Missing the required parameter 'listName' when calling addNewList";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'listName': listName
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/lists/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clearList operation.
     * @callback module:api/ListsApi~clearListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear Contacts from List
     * Clears all contacts from a list.
     * @param {String} listId The list to be cleared.
     * @param {module:api/ListsApi~clearListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clearList = function(listId, callback) {
      var postBody = null;

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw "Missing the required parameter 'listId' when calling clearList";
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/lists/{listId}/clear', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the copyListContacts operation.
     * @callback module:api/ListsApi~copyListContactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy All Contacts from a List
     * Copy all contacts from a list.
     * @param {String} fromListId The list to be cleared.
     * @param {String} listId The list to be cleared.
     * @param {module:api/ListsApi~copyListContactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.copyListContacts = function(fromListId, listId, callback) {
      var postBody = null;

      // verify the required parameter 'fromListId' is set
      if (fromListId == undefined || fromListId == null) {
        throw "Missing the required parameter 'fromListId' when calling copyListContacts";
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw "Missing the required parameter 'listId' when calling copyListContacts";
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fromListId': fromListId
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/lists/{listId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllLists operation.
     * @callback module:api/ListsApi~getAllListsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Lists
     * Get all the lists for a specific user.
     * @param {module:api/ListsApi~getAllListsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAllLists = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/lists/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressAllInList operation.
     * @callback module:api/ListsApi~suppressAllInListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suppress All Contacts from List
     * Suppresses all contacts in a list.
     * @param {String} listId The list to be cleared.
     * @param {module:api/ListsApi~suppressAllInListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.suppressAllInList = function(listId, callback) {
      var postBody = null;

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw "Missing the required parameter 'listId' when calling suppressAllInList";
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/lists/{listId}/suppress', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
