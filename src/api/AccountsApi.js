/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.AccountsApi = factory(root.Bombbomb.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Accounts service.
   * @module api/AccountsApi
   * @version 2.0.0
   */

  /**
   * Constructs a new AccountsApi. 
   * @alias module:api/AccountsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the accountDetails operation.
     * @callback module:api/AccountsApi~accountDetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account details.
     * Get the details of the user&#39;s account.
     * @param {module:api/AccountsApi~accountDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountDetails = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccount operation.
     * @callback module:api/AccountsApi~createAccountCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Account
     * Creates a new BombBomb account. This method is currently only available to paid seat admins.
     * @param {String} teamId The team id
     * @param {String} firstName First name of the user.
     * @param {String} lastName Last name of the user.
     * @param {String} emailAddress Email address of the user.
     * @param {String} companyName Company of the user.
     * @param {String} phone Phone number of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.country Country of the user.
     * @param {String} opts.industry Industry of the user.
     * @param {String} opts.address Street Address of the user.
     * @param {String} opts.city City of the user.
     * @param {String} opts.postalCode Postal/Zip code of the user.
     * @param {Boolean} opts.preventWelcomeEmail prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39;
     * @param {module:api/AccountsApi~createAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.createAccount = function(teamId, firstName, lastName, emailAddress, companyName, phone, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling createAccount";
      }

      // verify the required parameter 'firstName' is set
      if (firstName == undefined || firstName == null) {
        throw "Missing the required parameter 'firstName' when calling createAccount";
      }

      // verify the required parameter 'lastName' is set
      if (lastName == undefined || lastName == null) {
        throw "Missing the required parameter 'lastName' when calling createAccount";
      }

      // verify the required parameter 'emailAddress' is set
      if (emailAddress == undefined || emailAddress == null) {
        throw "Missing the required parameter 'emailAddress' when calling createAccount";
      }

      // verify the required parameter 'companyName' is set
      if (companyName == undefined || companyName == null) {
        throw "Missing the required parameter 'companyName' when calling createAccount";
      }

      // verify the required parameter 'phone' is set
      if (phone == undefined || phone == null) {
        throw "Missing the required parameter 'phone' when calling createAccount";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'teamId': teamId,
        'firstName': firstName,
        'lastName': lastName,
        'emailAddress': emailAddress,
        'companyName': companyName,
        'phone': phone,
        'country': opts['country'],
        'industry': opts['industry'],
        'address': opts['address'],
        'city': opts['city'],
        'postalCode': opts['postalCode'],
        'preventWelcomeEmail': opts['preventWelcomeEmail']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientStatistics operation.
     * @callback module:api/AccountsApi~getClientStatisticsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Client Statistics
     * Gets general statics for a Client
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientId Client ID of the account to retrieve. Defaults to yourself.
     * @param {Boolean} opts.refresh Boolean for whether data returned should be from cache or not.
     * @param {String} opts.statisticValues Array of data that should be returned, used exclusively for cacheless data
     * @param {module:api/AccountsApi~getClientStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getClientStatistics = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'clientId': opts['clientId'],
        'refresh': opts['refresh'],
        'statisticValues': opts['statisticValues']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserCountry operation.
     * @callback module:api/AccountsApi~getUserCountryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets user country
     * Gets the users country
     * @param {module:api/AccountsApi~getUserCountryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getUserCountry = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/{clientId}/country', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetApiKey operation.
     * @callback module:api/AccountsApi~resetApiKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset API key
     * Resets the current user&#39;s API key and returns the new key
     * @param {module:api/AccountsApi~resetApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetApiKey = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/apikey', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionPurchaseAllowed operation.
     * @callback module:api/AccountsApi~subscriptionPurchaseAllowedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if subscription purchase allowed.
     * Check whether the user can purchase a subscription.
     * @param {module:api/AccountsApi~subscriptionPurchaseAllowedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.subscriptionPurchaseAllowed = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/purchaseable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfileData operation.
     * @callback module:api/AccountsApi~updateProfileDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add profile information.
     * Add profile information to this users account
     * @param {Object} opts Optional parameters
     * @param {String} opts.profileData Profile field information for the account
     * @param {module:api/AccountsApi~updateProfileDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateProfileData = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'profileData': opts['profileData']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/account/profile/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
