/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.AutomationsApi = factory(root.Bombbomb.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Automations service.
   * @module api/AutomationsApi
   * @version 2.0.25798
   */

  /**
   * Constructs a new AutomationsApi. 
   * @alias module:api/AutomationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getDripDropStats operation.
     * @callback module:api/AutomationsApi~getDripDropStatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Automation Email Stats
     * Get Automation Email Stats
     * @param {String} dripId The id of the drip
     * @param {String} dripDropId The id of the drip drop
     * @param {module:api/AutomationsApi~getDripDropStatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDripDropStats = function(dripId, dripDropId, callback) {
      var postBody = null;

      // verify the required parameter 'dripId' is set
      if (dripId === undefined || dripId === null) {
        throw new Error("Missing the required parameter 'dripId' when calling getDripDropStats");
      }

      // verify the required parameter 'dripDropId' is set
      if (dripDropId === undefined || dripDropId === null) {
        throw new Error("Missing the required parameter 'dripDropId' when calling getDripDropStats");
      }


      var pathParams = {
        'dripId': dripId,
        'dripDropId': dripDropId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/automation/{dripId}/dripdrop/{dripDropId}/stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDripStats operation.
     * @callback module:api/AutomationsApi~getDripStatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Automation Stats
     * Get Automation Stats
     * @param {String} id The id of the automation
     * @param {module:api/AutomationsApi~getDripStatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDripStats = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDripStats");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/automation/{id}/stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchedulingStatus operation.
     * @callback module:api/AutomationsApi~getSchedulingStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the number of pending scheduling calculations
     * Get the number of pending scheduling calculations
     * @param {String} id The id of the automation
     * @param {module:api/AutomationsApi~getSchedulingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSchedulingStatus = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSchedulingStatus");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/automation/{id}/scheduling/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
