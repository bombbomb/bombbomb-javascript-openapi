/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.ContactsApi = factory(root.Bombbomb.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Contacts service.
   * @module api/ContactsApi
   * @version 2.0.25797
   */

  /**
   * Constructs a new ContactsApi. 
   * @alias module:api/ContactsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addContactsCSV operation.
     * @callback module:api/ContactsApi~addContactsCSVCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add contacts from a CSV file.
     * Add multiple contacts through the upload importer from a CSV file.
     * @param {String} mappingData The info sent for the contacts
     * @param {String} listData The info sent with the import for the list
     * @param {module:api/ContactsApi~addContactsCSVCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addContactsCSV = function(mappingData, listData, callback) {
      var postBody = null;

      // verify the required parameter 'mappingData' is set
      if (mappingData == undefined || mappingData == null) {
        throw "Missing the required parameter 'mappingData' when calling addContactsCSV";
      }

      // verify the required parameter 'listData' is set
      if (listData == undefined || listData == null) {
        throw "Missing the required parameter 'listData' when calling addContactsCSV";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'mappingData': mappingData,
        'listData': listData
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/import_csv', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNewContact operation.
     * @callback module:api/ContactsApi~addNewContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a contact.
     * Add a contact to the users list.
     * @param {String} contactEmail Email of the new contact we are adding
     * @param {Object} opts Optional parameters
     * @param {String} opts.contactInfo The info sent for this contact
     * @param {module:api/ContactsApi~addNewContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addNewContact = function(contactEmail, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contactEmail' is set
      if (contactEmail == undefined || contactEmail == null) {
        throw "Missing the required parameter 'contactEmail' when calling addNewContact";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'contactEmail': contactEmail,
        'contactInfo': opts['contactInfo']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNewCustomField operation.
     * @callback module:api/ContactsApi~addNewCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add custom fields.
     * Add a new custom field.
     * @param {String} fieldName Custom field name to be added
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldType Custom field type for the field to be added
     * @param {module:api/ContactsApi~addNewCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addNewCustomField = function(fieldName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fieldName' is set
      if (fieldName == undefined || fieldName == null) {
        throw "Missing the required parameter 'fieldName' when calling addNewCustomField";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fieldName': fieldName,
        'fieldType': opts['fieldType']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/custom_fields/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPastedContacts operation.
     * @callback module:api/ContactsApi~addPastedContactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add pasted contacts.
     * Add the pasted contacts to the users list.
     * @param {String} contactEmails Emails array of the new contacts we are adding
     * @param {Object} opts Optional parameters
     * @param {String} opts.listInfo Information about the lists id, recalculations on totals, consent etc
     * @param {module:api/ContactsApi~addPastedContactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPastedContacts = function(contactEmails, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contactEmails' is set
      if (contactEmails == undefined || contactEmails == null) {
        throw "Missing the required parameter 'contactEmails' when calling addPastedContacts";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'contactEmails': contactEmails,
        'listInfo': opts['listInfo']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/paste', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cSVToObject operation.
     * @callback module:api/ContactsApi~cSVToObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Format CSV.
     * Format a CSV file to an object.
     * @param {String} file The CSV file being uploaded
     * @param {module:api/ContactsApi~cSVToObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.cSVToObject = function(file, callback) {
      var postBody = null;

      // verify the required parameter 'file' is set
      if (file == undefined || file == null) {
        throw "Missing the required parameter 'file' when calling cSVToObject";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/csv-to-object', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContacts operation.
     * @callback module:api/ContactsApi~deleteContactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Contacts
     * Delete contacts
     * @param {String} listId The list of contacts to be deleted.
     * @param {module:api/ContactsApi~deleteContactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteContacts = function(listId, callback) {
      var postBody = null;

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw "Missing the required parameter 'listId' when calling deleteContacts";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'listId': listId
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/delete', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactById operation.
     * @callback module:api/ContactsApi~getContactByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Contact Details
     * Get the contact details
     * @param {String} id Guid for the contact.
     * @param {module:api/ContactsApi~getContactByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getContactById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getContactById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contact/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields operation.
     * @callback module:api/ContactsApi~getCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom fields.
     * Get the current users custom fields.
     * @param {module:api/ContactsApi~getCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCustomFields = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/custom_fields/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
