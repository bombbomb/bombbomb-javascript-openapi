/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.EmailsApi = factory(root.Bombbomb.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Emails service.
   * @module api/EmailsApi
   * @version 2.0.25798
   */

  /**
   * Constructs a new EmailsApi. 
   * @alias module:api/EmailsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createPrintingPressEmail operation.
     * @callback module:api/EmailsApi~createPrintingPressEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Email with Printing Press
     * Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
     * @param {String} templateId The template id to be printed.
     * @param {String} content The content of the email.
     * @param {Object} opts Optional parameters
     * @param {String} opts.emailId The email id to be printed to.
     * @param {String} opts.videoId A video to replace video place holders with.
     * @param {String} opts.subjectLine The subject line to be printed.
     * @param {module:api/EmailsApi~createPrintingPressEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createPrintingPressEmail = function(templateId, content, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling createPrintingPressEmail");
      }

      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling createPrintingPressEmail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'templateId': templateId,
        'content': content,
        'emailId': opts['emailId'],
        'videoId': opts['videoId'],
        'subjectLine': opts['subjectLine']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/print', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTemplatesForCurrentUser operation.
     * @callback module:api/EmailsApi~getAllTemplatesForCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all user templates
     * Get all templates accessible to the current user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.quickSendOnly Whether to return only quick send templates.
     * @param {module:api/EmailsApi~getAllTemplatesForCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAllTemplatesForCurrentUser = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'quickSendOnly': opts['quickSendOnly'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTracking operation.
     * @callback module:api/EmailsApi~getEmailTrackingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Email Tracking
     * Get Tracking data for all sends of an Email
     * @param {String} emailId ID of the email
     * @param {Object} opts Optional parameters
     * @param {String} opts.jobId ID of the Job (or null for all jobs)
     * @param {module:api/EmailsApi~getEmailTrackingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getEmailTracking = function(emailId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling getEmailTracking");
      }


      var pathParams = {
        'emailId': emailId
      };
      var queryParams = {
        'jobId': opts['jobId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/{emailId}/tracking', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTrackingInteractions operation.
     * @callback module:api/EmailsApi~getEmailTrackingInteractionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Email Tracking Interactions
     * Get Contact detail interactions for an Email
     * @param {String} emailId ID of the email
     * @param {Object} opts Optional parameters
     * @param {String} opts.jobId ID of the Job (or null for all jobs)
     * @param {String} opts.interactionType Interaction type to order and filter by
     * @param {String} opts.searchTerm Search term to filer by
     * @param {module:api/EmailsApi~getEmailTrackingInteractionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getEmailTrackingInteractions = function(emailId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling getEmailTrackingInteractions");
      }


      var pathParams = {
        'emailId': emailId
      };
      var queryParams = {
        'jobId': opts['jobId'],
        'interactionType': opts['interactionType'],
        'searchTerm': opts['searchTerm'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/{emailId}/tracking/interactions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHourlyEmailTracking operation.
     * @callback module:api/EmailsApi~getHourlyEmailTrackingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Hourly Email Tracking
     * Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
     * @param {String} emailId ID of the email
     * @param {Object} opts Optional parameters
     * @param {String} opts.jobId ID of the Job (or null for all jobs)
     * @param {String} opts.interactionType Interaction type to filter by
     * @param {module:api/EmailsApi~getHourlyEmailTrackingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getHourlyEmailTracking = function(emailId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling getHourlyEmailTracking");
      }


      var pathParams = {
        'emailId': emailId
      };
      var queryParams = {
        'jobId': opts['jobId'],
        'interactionType': opts['interactionType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/{emailId}/tracking/hourly', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveFireData operation.
     * @callback module:api/EmailsApi~getLiveFireDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get livefire feed data
     * Get the user data for the live fire feed emails
     * @param {module:api/EmailsApi~getLiveFireDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getLiveFireData = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/livefire', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuickSendTemplates operation.
     * @callback module:api/EmailsApi~getQuickSendTemplatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all quicksend templates
     * Get all quicksend templates accessible to the user.
     * @param {module:api/EmailsApi~getQuickSendTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getQuickSendTemplates = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/quicksend/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateHtmlForTemplateId operation.
     * @callback module:api/EmailsApi~getTemplateHtmlForTemplateIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the HTML for a given template
     * Get the HTML for a given template, with or without rendered variables
     * @param {String} templateId The id of the template.
     * @param {Object} opts Optional parameters
     * @param {String} opts.renderVariables Whether to render profile variables in the returned HTML.
     * @param {module:api/EmailsApi~getTemplateHtmlForTemplateIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getTemplateHtmlForTemplateId = function(templateId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplateHtmlForTemplateId");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
        'renderVariables': opts['renderVariables'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/templates/{templateId}/html', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoQuickSenderData operation.
     * @callback module:api/EmailsApi~getVideoQuickSenderDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quicksend data
     * Get the user data for quicksender, including templates and lists.
     * @param {Object} opts Optional parameters
     * @param {String} opts.message A message for the video content.
     * @param {String} opts.subject A subject for the video content.
     * @param {String} opts.videoId A video ID.
     * @param {String} opts.templateId A template ID.
     * @param {String} opts.commaDelimEmails Comma delimited emails
     * @param {module:api/EmailsApi~getVideoQuickSenderDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getVideoQuickSenderData = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'message': opts['message'],
        'subject': opts['subject'],
        'videoId': opts['videoId'],
        'templateId': opts['templateId'],
        'commaDelimEmails': opts['commaDelimEmails'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/quicksend', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveQuickSenderSettings operation.
     * @callback module:api/EmailsApi~saveQuickSenderSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save quicksender settings
     * Save the quicksender notification and default template settings
     * @param {Object} opts Optional parameters
     * @param {String} opts.alertOnPlay A preference setting for whether or not to notify user on quicksend email video plays.
     * @param {String} opts.alertOnOpen A preference setting for whether or not to notify user on quicksend email opens.
     * @param {String} opts.templateId Id of a template to use for this send. A null value means use the default for this user.
     * @param {module:api/EmailsApi~saveQuickSenderSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveQuickSenderSettings = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'alertOnPlay': opts['alertOnPlay'],
        'alertOnOpen': opts['alertOnOpen'],
        'templateId': opts['templateId']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/quicksend/settings', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the videoQuickSender operation.
     * @callback module:api/EmailsApi~videoQuickSenderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a quicksend email
     * Send a quicksend video email to the list or users provided.
     * @param {Object} opts Optional parameters
     * @param {String} opts.videoId A guid id for the video.
     * @param {String} opts.emailAddresses A semi-colon separated list of email addresses to send to.
     * @param {String} opts.subject Subject line for the email.
     * @param {String} opts.message Message for the body of the email.
     * @param {String} opts.listIds An array of list ids
     * @param {Number} opts.scheduledSendTimestamp When to schedule the send (seconds since epoch). null value means send immediately.
     * @param {String} opts.extendedProperties Bool value that when checked will send back both emailId as well as extra properties
     * @param {String} opts.templateId Id of a template to use for this send. A null value means use the default for this user.
     * @param {String} opts.stripHTML remove HTML elements
     * @param {module:api/EmailsApi~videoQuickSenderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.videoQuickSender = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'videoId': opts['videoId'],
        'emailAddresses': opts['emailAddresses'],
        'subject': opts['subject'],
        'message': opts['message'],
        'listIds': opts['listIds'],
        'scheduledSendTimestamp': opts['scheduledSendTimestamp'],
        'extendedProperties': opts['extendedProperties'],
        'templateId': opts['templateId'],
        'stripHTML': opts['stripHTML']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/quicksend', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
