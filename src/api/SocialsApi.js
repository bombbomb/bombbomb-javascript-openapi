/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.SocialsApi = factory(root.Bombbomb.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Socials service.
   * @module api/SocialsApi
   * @version 2.0.831
   */

  /**
   * Constructs a new SocialsApi. 
   * @alias module:api/SocialsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getFacebookPages operation.
     * @callback module:api/SocialsApi~getFacebookPagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets facebook pages
     * Gets facebook pages by client id
     * @param {module:api/SocialsApi~getFacebookPagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getFacebookPages = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/facebook/pages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSocialArticleProperties operation.
     * @callback module:api/SocialsApi~getSocialArticlePropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the social email properties
     * Gets the social email properties
     * @param {String} emailId This is the email Id for the email url
     * @param {String} socialContentId This is the social content Id
     * @param {module:api/SocialsApi~getSocialArticlePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSocialArticleProperties = function(emailId, socialContentId, callback) {
      var postBody = null;

      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling getSocialArticleProperties");
      }

      // verify the required parameter 'socialContentId' is set
      if (socialContentId === undefined || socialContentId === null) {
        throw new Error("Missing the required parameter 'socialContentId' when calling getSocialArticleProperties");
      }


      var pathParams = {
      };
      var queryParams = {
        'emailId': emailId,
        'socialContentId': socialContentId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSocialAuthorizations operation.
     * @callback module:api/SocialsApi~getSocialAuthorizationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authorizations for all social integration
     * Get authorizations and autoshares for all social integration and has redirect for user to login
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientGroupId ID of the client group association
     * @param {module:api/SocialsApi~getSocialAuthorizationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSocialAuthorizations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'clientGroupId': opts['clientGroupId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/authorizations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSocialProfileProperties operation.
     * @callback module:api/SocialsApi~getSocialProfilePropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the profile properties
     * Gets the social profile properties
     * @param {String} socialType The social type
     * @param {module:api/SocialsApi~getSocialProfilePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSocialProfileProperties = function(socialType, callback) {
      var postBody = null;

      // verify the required parameter 'socialType' is set
      if (socialType === undefined || socialType === null) {
        throw new Error("Missing the required parameter 'socialType' when calling getSocialProfileProperties");
      }


      var pathParams = {
      };
      var queryParams = {
        'socialType': socialType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/profile', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSocialStats operation.
     * @callback module:api/SocialsApi~getSocialStatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get social stats for a prompt
     * Get social stats for a prompt by id
     * @param {String} promptId ID of the prompt
     * @param {module:api/SocialsApi~getSocialStatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSocialStats = function(promptId, callback) {
      var postBody = null;

      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling getSocialStats");
      }


      var pathParams = {
        'promptId': promptId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/{promptId}/stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSocialContent operation.
     * @callback module:api/SocialsApi~postSocialContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates social content
     * Creates social content for an email
     * @param {String} emailId The email&#39;s id
     * @param {module:api/SocialsApi~postSocialContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postSocialContent = function(emailId, callback) {
      var postBody = null;

      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling postSocialContent");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'emailId': emailId
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/content', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrySocialSend operation.
     * @callback module:api/SocialsApi~retrySocialSendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends social content
     * Sends social content that failed for a user via their associated prompt
     * @param {String} promptId The prompt id
     * @param {module:api/SocialsApi~retrySocialSendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.retrySocialSend = function(promptId, callback) {
      var postBody = null;

      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling retrySocialSend");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'promptId': promptId
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/send/retry', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendSocial operation.
     * @callback module:api/SocialsApi~sendSocialCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends social content
     * Sends social content for a user via their associated prompt
     * @param {String} promptId The prompt id
     * @param {String} socialType The destination for social content
     * @param {module:api/SocialsApi~sendSocialCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendSocial = function(promptId, socialType, callback) {
      var postBody = null;

      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling sendSocial");
      }

      // verify the required parameter 'socialType' is set
      if (socialType === undefined || socialType === null) {
        throw new Error("Missing the required parameter 'socialType' when calling sendSocial");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'promptId': promptId,
        'socialType': socialType
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientGroupSendMechanism operation.
     * @callback module:api/SocialsApi~updateClientGroupSendMechanismCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the auto shares from the client group assoc id
     * Gets the auto shares from the client group assoc id
     * @param {String} sendMechanism The send mechanism for the prompt
     * @param {String} clientGroupId ID of the client group association
     * @param {Object} opts Optional parameters
     * @param {String} opts.enabled Is the send mechanism enabled?
     * @param {module:api/SocialsApi~updateClientGroupSendMechanismCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateClientGroupSendMechanism = function(sendMechanism, clientGroupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'sendMechanism' is set
      if (sendMechanism === undefined || sendMechanism === null) {
        throw new Error("Missing the required parameter 'sendMechanism' when calling updateClientGroupSendMechanism");
      }

      // verify the required parameter 'clientGroupId' is set
      if (clientGroupId === undefined || clientGroupId === null) {
        throw new Error("Missing the required parameter 'clientGroupId' when calling updateClientGroupSendMechanism");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'sendMechanism': sendMechanism,
        'clientGroupId': clientGroupId,
        'enabled': opts['enabled']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/client/sendMechanism', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientGroupsSendMechanism operation.
     * @callback module:api/SocialsApi~updateClientGroupsSendMechanismCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggles the prompt campaigns in a users account
     * Toggles the prompt campaigns in a users account for a social integrations on or off
     * @param {String} sendMechanism The send mechanism for the prompt
     * @param {String} enabled Is the send mechanism enabled?
     * @param {module:api/SocialsApi~updateClientGroupsSendMechanismCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateClientGroupsSendMechanism = function(sendMechanism, enabled, callback) {
      var postBody = null;

      // verify the required parameter 'sendMechanism' is set
      if (sendMechanism === undefined || sendMechanism === null) {
        throw new Error("Missing the required parameter 'sendMechanism' when calling updateClientGroupsSendMechanism");
      }

      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling updateClientGroupsSendMechanism");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'sendMechanism': sendMechanism,
        'enabled': enabled
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/client/sendMechanisms', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFacebookPages operation.
     * @callback module:api/SocialsApi~updateFacebookPagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates facebook page Ids
     * Updates facebook page Ids to be sent to for prompts
     * @param {String} pageIds Page Ids for the prompt
     * @param {module:api/SocialsApi~updateFacebookPagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateFacebookPages = function(pageIds, callback) {
      var postBody = null;

      // verify the required parameter 'pageIds' is set
      if (pageIds === undefined || pageIds === null) {
        throw new Error("Missing the required parameter 'pageIds' when calling updateFacebookPages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'pageIds': pageIds
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/facebook/pages', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSocialContent operation.
     * @callback module:api/SocialsApi~updateSocialContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates social content
     * Updates social content for an email
     * @param {String} socialId The social id
     * @param {Object} opts Optional parameters
     * @param {String} opts.title The title for the article
     * @param {String} opts.description The article description
     * @param {String} opts.pictureUrl The article picture url
     * @param {String} opts.suggestedMessage The suggested message to use
     * @param {module:api/SocialsApi~updateSocialContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSocialContent = function(socialId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'socialId' is set
      if (socialId === undefined || socialId === null) {
        throw new Error("Missing the required parameter 'socialId' when calling updateSocialContent");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'socialId': socialId,
        'title': opts['title'],
        'description': opts['description'],
        'pictureUrl': opts['pictureUrl'],
        'suggestedMessage': opts['suggestedMessage']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/content', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
