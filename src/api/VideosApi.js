/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/VideoEncodingStatusResponse', 'model/VideoRecorderMethodResponse', 'model/VideoPublicRepresentation', 'model/SignUploadRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/VideoEncodingStatusResponse'), require('../model/VideoRecorderMethodResponse'), require('../model/VideoPublicRepresentation'), require('../model/SignUploadRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.VideosApi = factory(root.Bombbomb.ApiClient, root.Bombbomb.VideoEncodingStatusResponse, root.Bombbomb.VideoRecorderMethodResponse, root.Bombbomb.VideoPublicRepresentation, root.Bombbomb.SignUploadRequest);
  }
}(this, function(ApiClient, VideoEncodingStatusResponse, VideoRecorderMethodResponse, VideoPublicRepresentation, SignUploadRequest) {
  'use strict';

  /**
   * Videos service.
   * @module api/VideosApi
   * @version 2.0.25797
   */

  /**
   * Constructs a new VideosApi. 
   * @alias module:api/VideosApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getVideoEncodingStatus operation.
     * @callback module:api/VideosApi~getVideoEncodingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoEncodingStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Video Encoding Status
     * Get information about the current state of encoding for a given video id.
     * @param {String} videoId The video&#39;s id.
     * @param {module:api/VideosApi~getVideoEncodingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoEncodingStatusResponse}
     */
    this.getVideoEncodingStatus = function(videoId, callback) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw "Missing the required parameter 'videoId' when calling getVideoEncodingStatus";
      }


      var pathParams = {
        'videoId': videoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = VideoEncodingStatusResponse;

      return this.apiClient.callApi(
        '/videos/{videoId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoRecorder operation.
     * @callback module:api/VideosApi~getVideoRecorderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoRecorderMethodResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Live Video Recorder HTML
     * Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.width The width of the recorder to present.
     * @param {String} opts.videoId The id of the video to record
     * @param {module:api/VideosApi~getVideoRecorderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoRecorderMethodResponse}
     */
    this.getVideoRecorder = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'width': opts['width'],
        'videoId': opts['videoId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = VideoRecorderMethodResponse;

      return this.apiClient.callApi(
        '/videos/live/getRecorder', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the markLiveRecordingComplete operation.
     * @callback module:api/VideosApi~markLiveRecordingCompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoPublicRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Completes a live recording
     * Used in conjunction with the live recorder method to mark a video recording as complete.
     * @param {String} videoId The id of the video to mark as done.
     * @param {String} filename The filename that was chosen as the final video.
     * @param {String} title The title to give the video
     * @param {module:api/VideosApi~markLiveRecordingCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoPublicRepresentation}
     */
    this.markLiveRecordingComplete = function(videoId, filename, title, callback) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw "Missing the required parameter 'videoId' when calling markLiveRecordingComplete";
      }

      // verify the required parameter 'filename' is set
      if (filename == undefined || filename == null) {
        throw "Missing the required parameter 'filename' when calling markLiveRecordingComplete";
      }

      // verify the required parameter 'title' is set
      if (title == undefined || title == null) {
        throw "Missing the required parameter 'title' when calling markLiveRecordingComplete";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'videoId': videoId,
        'filename': filename,
        'title': title
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = VideoPublicRepresentation;

      return this.apiClient.callApi(
        '/videos/live/markComplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the signUpload operation.
     * @callback module:api/VideosApi~signUploadCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Signed Url
     * Generates a signed url to be used for video uploads.
     * @param {module:model/SignUploadRequest} policy The policy to sign
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.v4 Whether to do v4 signing
     * @param {module:api/VideosApi~signUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.signUpload = function(policy, opts, callback) {
      opts = opts || {};
      var postBody = policy;

      // verify the required parameter 'policy' is set
      if (policy == undefined || policy == null) {
        throw "Missing the required parameter 'policy' when calling signUpload";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'v4': opts['v4']
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/video/signedUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVideoThumbnailV2 operation.
     * @callback module:api/VideosApi~updateVideoThumbnailV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload thumbnail
     * Upload a new video thumbnail
     * @param {String} videoId The id of the video
     * @param {String} thumbnail The thumbnail being uploaded
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.custom The default email to use.
     * @param {module:api/VideosApi~updateVideoThumbnailV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateVideoThumbnailV2 = function(videoId, thumbnail, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw "Missing the required parameter 'videoId' when calling updateVideoThumbnailV2";
      }

      // verify the required parameter 'thumbnail' is set
      if (thumbnail == undefined || thumbnail == null) {
        throw "Missing the required parameter 'thumbnail' when calling updateVideoThumbnailV2";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'videoId': videoId,
        'custom': opts['custom'],
        'thumbnail': thumbnail
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/videos/thumbnail', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
