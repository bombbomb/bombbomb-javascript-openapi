/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.VideoEmailPrompt = factory(root.Bombbomb.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The VideoEmailPrompt model module.
   * @module model/VideoEmailPrompt
   * @version 2.0.831
   */

  /**
   * Constructs a new <code>VideoEmailPrompt</code>.
   * Configures a single prompt which asks a user to record a video into an outgoing email.
   * @alias module:model/VideoEmailPrompt
   * @class
   */
  var exports = function() {
    var _this = this;

































  };

  /**
   * Constructs a <code>VideoEmailPrompt</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VideoEmailPrompt} obj Optional instance to populate.
   * @return {module:model/VideoEmailPrompt} The populated <code>VideoEmailPrompt</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('templateId')) {
        obj['templateId'] = ApiClient.convertToType(data['templateId'], 'String');
      }
      if (data.hasOwnProperty('emailSubjectLine')) {
        obj['emailSubjectLine'] = ApiClient.convertToType(data['emailSubjectLine'], 'String');
      }
      if (data.hasOwnProperty('emailContent')) {
        obj['emailContent'] = ApiClient.convertToType(data['emailContent'], 'String');
      }
      if (data.hasOwnProperty('contactId')) {
        obj['contactId'] = ApiClient.convertToType(data['contactId'], 'String');
      }
      if (data.hasOwnProperty('toLists')) {
        obj['toLists'] = ApiClient.convertToType(data['toLists'], ['String']);
      }
      if (data.hasOwnProperty('promptIntro')) {
        obj['promptIntro'] = ApiClient.convertToType(data['promptIntro'], 'String');
      }
      if (data.hasOwnProperty('exampleVideoId')) {
        obj['exampleVideoId'] = ApiClient.convertToType(data['exampleVideoId'], 'String');
      }
      if (data.hasOwnProperty('followupVideoId')) {
        obj['followupVideoId'] = ApiClient.convertToType(data['followupVideoId'], 'String');
      }
      if (data.hasOwnProperty('sendWithoutVideo')) {
        obj['sendWithoutVideo'] = ApiClient.convertToType(data['sendWithoutVideo'], 'Boolean');
      }
      if (data.hasOwnProperty('videoDueDate')) {
        obj['videoDueDate'] = ApiClient.convertToType(data['videoDueDate'], 'Date');
      }
      if (data.hasOwnProperty('videoId')) {
        obj['videoId'] = ApiClient.convertToType(data['videoId'], 'String');
      }
      if (data.hasOwnProperty('emailId')) {
        obj['emailId'] = ApiClient.convertToType(data['emailId'], 'String');
      }
      if (data.hasOwnProperty('jobId')) {
        obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
      }
      if (data.hasOwnProperty('promptBotId')) {
        obj['promptBotId'] = ApiClient.convertToType(data['promptBotId'], 'String');
      }
      if (data.hasOwnProperty('applyTemplate')) {
        obj['applyTemplate'] = ApiClient.convertToType(data['applyTemplate'], 'Boolean');
      }
      if (data.hasOwnProperty('facebookMessage')) {
        obj['facebookMessage'] = ApiClient.convertToType(data['facebookMessage'], 'String');
      }
      if (data.hasOwnProperty('twitterMessage')) {
        obj['twitterMessage'] = ApiClient.convertToType(data['twitterMessage'], 'String');
      }
      if (data.hasOwnProperty('linkedinMessage')) {
        obj['linkedinMessage'] = ApiClient.convertToType(data['linkedinMessage'], 'String');
      }
      if (data.hasOwnProperty('alternateContentId')) {
        obj['alternateContentId'] = ApiClient.convertToType(data['alternateContentId'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('userId')) {
        obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
      }
      if (data.hasOwnProperty('jerichoId')) {
        obj['jerichoId'] = ApiClient.convertToType(data['jerichoId'], 'String');
      }
      if (data.hasOwnProperty('promptSubject')) {
        obj['promptSubject'] = ApiClient.convertToType(data['promptSubject'], 'String');
      }
      if (data.hasOwnProperty('promptHtml')) {
        obj['promptHtml'] = ApiClient.convertToType(data['promptHtml'], 'String');
      }
      if (data.hasOwnProperty('scheduledSendDate')) {
        obj['scheduledSendDate'] = ApiClient.convertToType(data['scheduledSendDate'], 'Date');
      }
      if (data.hasOwnProperty('clientGroupId')) {
        obj['clientGroupId'] = ApiClient.convertToType(data['clientGroupId'], 'String');
      }
      if (data.hasOwnProperty('thumbnailUrl')) {
        obj['thumbnailUrl'] = ApiClient.convertToType(data['thumbnailUrl'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'Number');
      }
      if (data.hasOwnProperty('createdDate')) {
        obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
      }
      if (data.hasOwnProperty('lastNotified')) {
        obj['lastNotified'] = ApiClient.convertToType(data['lastNotified'], 'Date');
      }
      if (data.hasOwnProperty('sendMechanism')) {
        obj['sendMechanism'] = ApiClient.convertToType(data['sendMechanism'], 'Date');
      }
      if (data.hasOwnProperty('sendTypes')) {
        obj['sendTypes'] = ApiClient.convertToType(data['sendTypes'], ['String']);
      }
    }
    return obj;
  }

  /**
   * Optional. The email template to be used in the sent email, if none supplied, the users' default will be applied.
   * @member {String} templateId
   */
  exports.prototype['templateId'] = undefined;
  /**
   * The subject line of the final email
   * @member {String} emailSubjectLine
   */
  exports.prototype['emailSubjectLine'] = undefined;
  /**
   * The HTML content of the final email
   * @member {String} emailContent
   */
  exports.prototype['emailContent'] = undefined;
  /**
   * Contact Id to send the final email to
   * @member {String} contactId
   */
  exports.prototype['contactId'] = undefined;
  /**
   * List Ids to send the final email to
   * @member {Array.<String>} toLists
   */
  exports.prototype['toLists'] = undefined;
  /**
   * A paragraph intro statement about the purpose of the email you're recording a video for.
   * @member {String} promptIntro
   */
  exports.prototype['promptIntro'] = undefined;
  /**
   * An example or explanatory video to help the user understand what to say.
   * @member {String} exampleVideoId
   */
  exports.prototype['exampleVideoId'] = undefined;
  /**
   * An example or explanatory video to help the user understand what to say.
   * @member {String} followupVideoId
   */
  exports.prototype['followupVideoId'] = undefined;
  /**
   * Whether to send the email if no video is recorded. If set to require a video, and none is added before the videoDueDate, the prompt is cancelled.
   * @member {Boolean} sendWithoutVideo
   */
  exports.prototype['sendWithoutVideo'] = undefined;
  /**
   * When the video must be recorded by
   * @member {Date} videoDueDate
   */
  exports.prototype['videoDueDate'] = undefined;
  /**
   * The video that was added to the prompt. Read Only.
   * @member {String} videoId
   */
  exports.prototype['videoId'] = undefined;
  /**
   * The email that was created by the prompt Read Only.
   * @member {String} emailId
   */
  exports.prototype['emailId'] = undefined;
  /**
   * The job sent by the prompt Read Only.
   * @member {String} jobId
   */
  exports.prototype['jobId'] = undefined;
  /**
   * The bot that created the prompt.
   * @member {String} promptBotId
   */
  exports.prototype['promptBotId'] = undefined;
  /**
   * Controls whether a user template is applied to the message as it is sent
   * @member {Boolean} applyTemplate
   */
  exports.prototype['applyTemplate'] = undefined;
  /**
   * The facebook message to be passed off to social sender
   * @member {String} facebookMessage
   */
  exports.prototype['facebookMessage'] = undefined;
  /**
   * The twitter message to be passed off to social sender
   * @member {String} twitterMessage
   */
  exports.prototype['twitterMessage'] = undefined;
  /**
   * The linkedin message to be passed off to social sender
   * @member {String} linkedinMessage
   */
  exports.prototype['linkedinMessage'] = undefined;
  /**
   * The id for the alternate content id
   * @member {String} alternateContentId
   */
  exports.prototype['alternateContentId'] = undefined;
  /**
   * The identifier of the prompt. Read Only.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The prompt's owner. Read Only.
   * @member {String} userId
   */
  exports.prototype['userId'] = undefined;
  /**
   * If sent in a jericho context, this will have the jericho id
   * @member {String} jerichoId
   */
  exports.prototype['jerichoId'] = undefined;
  /**
   * The prompt's subject line
   * @member {String} promptSubject
   */
  exports.prototype['promptSubject'] = undefined;
  /**
   * The suggested script of the prompt.
   * @member {String} promptHtml
   */
  exports.prototype['promptHtml'] = undefined;
  /**
   * When the final email is scheduled to be sent
   * @member {Date} scheduledSendDate
   */
  exports.prototype['scheduledSendDate'] = undefined;
  /**
   * The client group campaign that created the prompt.
   * @member {String} clientGroupId
   */
  exports.prototype['clientGroupId'] = undefined;
  /**
   * The URL of a thumbnail image for this prompt
   * @member {String} thumbnailUrl
   */
  exports.prototype['thumbnailUrl'] = undefined;
  /**
   * The status of the prompt: created = 0, sent = 10, recorded = 20, job_created = 30, timed_out = 40, declined = 50 Read Only
   * @member {Number} status
   */
  exports.prototype['status'] = undefined;
  /**
   * When the email was first sent out
   * @member {Date} createdDate
   */
  exports.prototype['createdDate'] = undefined;
  /**
   * When the user was last notified about a prompt email waiting for a video
   * @member {Date} lastNotified
   */
  exports.prototype['lastNotified'] = undefined;
  /**
   * The sendMechanism property
   * @member {Date} sendMechanism
   */
  exports.prototype['sendMechanism'] = undefined;
  /**
   * The types of mechanisms this prompt can send.
   * @member {Array.<String>} sendTypes
   */
  exports.prototype['sendTypes'] = undefined;



  return exports;
}));


