/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PromptBot', 'model/VideoEmailPrompt'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PromptBot'), require('../model/VideoEmailPrompt'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.PromptsApi = factory(root.Bombbomb.ApiClient, root.Bombbomb.PromptBot, root.Bombbomb.VideoEmailPrompt);
  }
}(this, function(ApiClient, PromptBot, VideoEmailPrompt) {
  'use strict';

  /**
   * Prompts service.
   * @module api/PromptsApi
   * @version 2.0.25797
   */

  /**
   * Constructs a new PromptsApi. 
   * @alias module:api/PromptsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createPromptBot operation.
     * @callback module:api/PromptsApi~createPromptBotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromptBot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a running Prompt Bot for a list
     * Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
     * @param {String} emailId The default email to use.
     * @param {String} name The name of the bot.
     * @param {String} subject The subject of the default email.
     * @param {String} content The content used in the email.
     * @param {String} contactFieldValueColumn The custom field value column with dates for this bot.
     * @param {String} botTypeId The type of bot to create.
     * @param {String} templateId The template used to create the email id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.listId The list id to attach the bot to.
     * @param {String} opts.videoId The video used in the email.
     * @param {String} opts.endDate The time frame to complete sending to the list.
     * @param {module:api/PromptsApi~createPromptBotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromptBot}
     */
    this.createPromptBot = function(emailId, name, subject, content, contactFieldValueColumn, botTypeId, templateId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'emailId' is set
      if (emailId == undefined || emailId == null) {
        throw "Missing the required parameter 'emailId' when calling createPromptBot";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling createPromptBot";
      }

      // verify the required parameter 'subject' is set
      if (subject == undefined || subject == null) {
        throw "Missing the required parameter 'subject' when calling createPromptBot";
      }

      // verify the required parameter 'content' is set
      if (content == undefined || content == null) {
        throw "Missing the required parameter 'content' when calling createPromptBot";
      }

      // verify the required parameter 'contactFieldValueColumn' is set
      if (contactFieldValueColumn == undefined || contactFieldValueColumn == null) {
        throw "Missing the required parameter 'contactFieldValueColumn' when calling createPromptBot";
      }

      // verify the required parameter 'botTypeId' is set
      if (botTypeId == undefined || botTypeId == null) {
        throw "Missing the required parameter 'botTypeId' when calling createPromptBot";
      }

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling createPromptBot";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'listId': opts['listId'],
        'emailId': emailId,
        'videoId': opts['videoId'],
        'name': name,
        'subject': subject,
        'content': content,
        'contactFieldValueColumn': contactFieldValueColumn,
        'endDate': opts['endDate'],
        'botTypeId': botTypeId,
        'templateId': templateId
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = PromptBot;

      return this.apiClient.callApi(
        '/prompts/bots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVideoEmailPrompt operation.
     * @callback module:api/PromptsApi~createVideoEmailPromptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoEmailPrompt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompts user to send a video
     * Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
     * @param {module:model/VideoEmailPrompt} prompt The Video Email Prompt to be created
     * @param {module:api/PromptsApi~createVideoEmailPromptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoEmailPrompt}
     */
    this.createVideoEmailPrompt = function(prompt, callback) {
      var postBody = prompt;

      // verify the required parameter 'prompt' is set
      if (prompt == undefined || prompt == null) {
        throw "Missing the required parameter 'prompt' when calling createVideoEmailPrompt";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VideoEmailPrompt;

      return this.apiClient.callApi(
        '/prompt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingVideoEmailPrompts operation.
     * @callback module:api/PromptsApi~getPendingVideoEmailPromptsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VideoEmailPrompt>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pending prompts
     * Returns a list of prompts that have not been sent yet, and can still be customized.
     * @param {module:api/PromptsApi~getPendingVideoEmailPromptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VideoEmailPrompt>}
     */
    this.getPendingVideoEmailPrompts = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = [VideoEmailPrompt];

      return this.apiClient.callApi(
        '/prompt/pending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPromptBots operation.
     * @callback module:api/PromptsApi~getPromptBotsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PromptBot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Prompt Bots
     * Returns a list of all Prompt Bots for the user.
     * @param {module:api/PromptsApi~getPromptBotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PromptBot>}
     */
    this.getPromptBots = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = [PromptBot];

      return this.apiClient.callApi(
        '/prompts/bots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPromptCampaigns operation.
     * @callback module:api/PromptsApi~getPromptCampaignsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Prompt Campaigns
     * Returns a list of all Prompt Campaigns for the user.
     * @param {module:api/PromptsApi~getPromptCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPromptCampaigns = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/prompts/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoEmailPrompt operation.
     * @callback module:api/PromptsApi~getVideoEmailPromptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoEmailPrompt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a prompt
     * Gets a prompt
     * @param {String} id The Id of the prompt
     * @param {module:api/PromptsApi~getVideoEmailPromptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoEmailPrompt}
     */
    this.getVideoEmailPrompt = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getVideoEmailPrompt";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = VideoEmailPrompt;

      return this.apiClient.callApi(
        '/prompt/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoEmailPrompts operation.
     * @callback module:api/PromptsApi~getVideoEmailPromptsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VideoEmailPrompt>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List prompts
     * Returns a list of all prompts.
     * @param {module:api/PromptsApi~getVideoEmailPromptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VideoEmailPrompt>}
     */
    this.getVideoEmailPrompts = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = [VideoEmailPrompt];

      return this.apiClient.callApi(
        '/prompt/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the respondToVideoEmailPrompt operation.
     * @callback module:api/PromptsApi~respondToVideoEmailPromptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoEmailPrompt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Respond to a prompt
     * Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
     * @param {String} id The id of the prompt.
     * @param {module:model/String} choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual
     * @param {Object} opts Optional parameters
     * @param {String} opts.videoId The id of the video.
     * @param {String} opts.emailId The id of the email.
     * @param {String} opts.subject The subject of the email
     * @param {module:api/PromptsApi~respondToVideoEmailPromptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoEmailPrompt}
     */
    this.respondToVideoEmailPrompt = function(id, choice, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling respondToVideoEmailPrompt";
      }

      // verify the required parameter 'choice' is set
      if (choice == undefined || choice == null) {
        throw "Missing the required parameter 'choice' when calling respondToVideoEmailPrompt";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'videoId': opts['videoId'],
        'emailId': opts['emailId'],
        'subject': opts['subject'],
        'choice': choice
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = VideoEmailPrompt;

      return this.apiClient.callApi(
        '/prompt/{id}/response', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePrompt operation.
     * @callback module:api/PromptsApi~updatePromptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Prompt
     * Updates a Prompt
     * @param {String} id The prompt&#39;s id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sendMechanism The mechanism for the prompt to be sent
     * @param {String} opts.facebookMessage The facebook message assigned to the prompt
     * @param {String} opts.twitterMessage The twitter message assigned to the prompt
     * @param {String} opts.videoId The id of the video.
     * @param {String} opts.emailId The id of the email.
     * @param {String} opts.subject The subject of the email
     * @param {module:api/PromptsApi~updatePromptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePrompt = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updatePrompt";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'sendMechanism': opts['sendMechanism'],
        'facebookMessage': opts['facebookMessage'],
        'twitterMessage': opts['twitterMessage'],
        'videoId': opts['videoId'],
        'emailId': opts['emailId'],
        'subject': opts['subject']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/prompts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePromptBot operation.
     * @callback module:api/PromptsApi~updatePromptBotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromptBot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Prompt Bot
     * Updates a Prompt Bot&#39;s settings.
     * @param {String} id The bot id.
     * @param {String} emailId The default email to use.
     * @param {String} name The name of the bot.
     * @param {String} subject The subject of the default email.
     * @param {String} content The content used in the default email.
     * @param {String} contactFieldValueColumn The custom field value column with dates for this bot.
     * @param {String} templateId The template used to create the email id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.listId The list id to attach the bot to.
     * @param {String} opts.videoId The video used in the default email.
     * @param {String} opts.endDate The time frame to complete sending to the list.
     * @param {String} opts.status The status of the bot.
     * @param {module:api/PromptsApi~updatePromptBotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromptBot}
     */
    this.updatePromptBot = function(id, emailId, name, subject, content, contactFieldValueColumn, templateId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updatePromptBot";
      }

      // verify the required parameter 'emailId' is set
      if (emailId == undefined || emailId == null) {
        throw "Missing the required parameter 'emailId' when calling updatePromptBot";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling updatePromptBot";
      }

      // verify the required parameter 'subject' is set
      if (subject == undefined || subject == null) {
        throw "Missing the required parameter 'subject' when calling updatePromptBot";
      }

      // verify the required parameter 'content' is set
      if (content == undefined || content == null) {
        throw "Missing the required parameter 'content' when calling updatePromptBot";
      }

      // verify the required parameter 'contactFieldValueColumn' is set
      if (contactFieldValueColumn == undefined || contactFieldValueColumn == null) {
        throw "Missing the required parameter 'contactFieldValueColumn' when calling updatePromptBot";
      }

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling updatePromptBot";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'listId': opts['listId'],
        'emailId': emailId,
        'videoId': opts['videoId'],
        'endDate': opts['endDate'],
        'status': opts['status'],
        'name': name,
        'subject': subject,
        'content': content,
        'contactFieldValueColumn': contactFieldValueColumn,
        'templateId': templateId
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = PromptBot;

      return this.apiClient.callApi(
        '/prompts/bots/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePromptCampaign operation.
     * @callback module:api/PromptsApi~updatePromptCampaignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Prompt Campaign
     * Updates a Prompt Campaign&#39;s Settings
     * @param {String} clientGroupId The client group of the campaign.
     * @param {Object} opts Optional parameters
     * @param {String} opts.brandedTemplateId The template to use for branded feel emails.
     * @param {String} opts.personalTemplateId The template to use for personal feel emails.
     * @param {Boolean} opts.enabled Set whether the user is able to start receiving prompts.
     * @param {String} opts.sendMechanism The way to send the prompt
     * @param {module:api/PromptsApi~updatePromptCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePromptCampaign = function(clientGroupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientGroupId' is set
      if (clientGroupId == undefined || clientGroupId == null) {
        throw "Missing the required parameter 'clientGroupId' when calling updatePromptCampaign";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'clientGroupId': clientGroupId,
        'brandedTemplateId': opts['brandedTemplateId'],
        'personalTemplateId': opts['personalTemplateId'],
        'enabled': opts['enabled'],
        'sendMechanism': opts['sendMechanism']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/prompts/campaigns/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
