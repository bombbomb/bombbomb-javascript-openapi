/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.24005
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TeamPublicRepresentation', 'model/InlineResponse200', 'model/JerichoConfiguration', 'model/JerichoPerformance'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/TeamPublicRepresentation'), require('../model/InlineResponse200'), require('../model/JerichoConfiguration'), require('../model/JerichoPerformance'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.TeamsApi = factory(root.Bombbomb.ApiClient, root.Bombbomb.TeamPublicRepresentation, root.Bombbomb.InlineResponse200, root.Bombbomb.JerichoConfiguration, root.Bombbomb.JerichoPerformance);
  }
}(this, function(ApiClient, TeamPublicRepresentation, InlineResponse200, JerichoConfiguration, JerichoPerformance) {
  'use strict';

  /**
   * Teams service.
   * @module api/TeamsApi
   * @version 2.0.24005
   */

  /**
   * Constructs a new TeamsApi. 
   * @alias module:api/TeamsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addTeamMember operation.
     * @callback module:api/TeamsApi~addTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Member to Team
     * Adds a member to a team.
     * @param {String} teamId The team id
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId The user id of the member being added to the team.
     * @param {String} opts.userEmail The email of the member being added to the team.
     * @param {Boolean} opts.admin Set if the user is an admin of this team.
     * @param {module:api/TeamsApi~addTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.addTeamMember = function(teamId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling addTeamMember";
      }


      var pathParams = {
        'teamId': teamId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'userId': opts['userId'],
        'userEmail': opts['userEmail'],
        'admin': opts['admin']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/team/{teamId}/member', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelJerichoSend operation.
     * @callback module:api/TeamsApi~cancelJerichoSendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a Jericho Send
     * Cancels a scheduled Jericho send from being sent.
     * @param {String} jerichoId ID of the Jericho Job to cancel
     * @param {module:api/TeamsApi~cancelJerichoSendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.cancelJerichoSend = function(jerichoId, callback) {
      var postBody = null;

      // verify the required parameter 'jerichoId' is set
      if (jerichoId == undefined || jerichoId == null) {
        throw "Missing the required parameter 'jerichoId' when calling cancelJerichoSend";
      }


      var pathParams = {
        'jerichoId': jerichoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/team/{teamId}/jericho/{jerichoId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSubteam operation.
     * @callback module:api/TeamsApi~createSubteamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamPublicRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Subteam
     * Adds a subteam to a parent team
     * @param {String} teamId The team id
     * @param {String} name The subteam&#39;s name.
     * @param {module:api/TeamsApi~createSubteamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamPublicRepresentation}
     */
    this.createSubteam = function(teamId, name, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling createSubteam";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling createSubteam";
      }


      var pathParams = {
        'teamId': teamId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = TeamPublicRepresentation;

      return this.apiClient.callApi(
        '/team/{teamId}/subteam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubteam operation.
     * @callback module:api/TeamsApi~deleteSubteamCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Subteam
     * Deletes a subteam
     * @param {String} teamId The team id
     * @param {String} subteamId The subteam you wish to delete.
     * @param {module:api/TeamsApi~deleteSubteamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteSubteam = function(teamId, subteamId, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling deleteSubteam";
      }

      // verify the required parameter 'subteamId' is set
      if (subteamId == undefined || subteamId == null) {
        throw "Missing the required parameter 'subteamId' when calling deleteSubteam";
      }


      var pathParams = {
        'teamId': teamId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'subteamId': subteamId
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/team/{teamId}/subteam', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllClientGroupAssociations operation.
     * @callback module:api/TeamsApi~getAllClientGroupAssociationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists team associations
     * Returns a collection of team associations for a given user
     * @param {String} clientId The clientId requesting group associations.
     * @param {module:api/TeamsApi~getAllClientGroupAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAllClientGroupAssociations = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId == undefined || clientId == null) {
        throw "Missing the required parameter 'clientId' when calling getAllClientGroupAssociations";
      }


      var pathParams = {
      };
      var queryParams = {
        'clientId': clientId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/team/associations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientGroupAssets operation.
     * @callback module:api/TeamsApi~getClientGroupAssetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists team assets
     * Returns a collection of assets
     * @param {module:model/String} assetType The type of assets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.teamId The team containing the assets.
     * @param {String} opts.autoTagName The auto tag name containing the assets.
     * @param {String} opts.pageSize The number of items to retrieve in a single db query.
     * @param {String} opts.page Zero-based index of the page of data to retrieve from the db.
     * @param {String} opts.search Search words.
     * @param {module:api/TeamsApi~getClientGroupAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.getClientGroupAssets = function(assetType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'assetType' is set
      if (assetType == undefined || assetType == null) {
        throw "Missing the required parameter 'assetType' when calling getClientGroupAssets";
      }


      var pathParams = {
      };
      var queryParams = {
        'assetType': assetType,
        'teamId': opts['teamId'],
        'autoTagName': opts['autoTagName'],
        'pageSize': opts['pageSize'],
        'page': opts['page'],
        'search': opts['search']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/team/assets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJerichoSends operation.
     * @callback module:api/TeamsApi~getJerichoSendsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JerichoConfiguration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Jericho Sends
     * Lists Jericho sends, both pending and sent.
     * @param {String} teamId The team whose Jericho sends you wish to see.
     * @param {module:api/TeamsApi~getJerichoSendsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JerichoConfiguration>}
     */
    this.getJerichoSends = function(teamId, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling getJerichoSends";
      }


      var pathParams = {
        'teamId': teamId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = [JerichoConfiguration];

      return this.apiClient.callApi(
        '/team/{teamId}/jericho', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJerichoStats operation.
     * @callback module:api/TeamsApi~getJerichoStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JerichoPerformance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Jericho performance statistics
     * Returns an aggregate view of the performance of a Jericho send
     * @param {String} jerichoId ID of the Jericho job
     * @param {String} teamId ID of team through which Jericho was sent
     * @param {module:api/TeamsApi~getJerichoStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JerichoPerformance}
     */
    this.getJerichoStats = function(jerichoId, teamId, callback) {
      var postBody = null;

      // verify the required parameter 'jerichoId' is set
      if (jerichoId == undefined || jerichoId == null) {
        throw "Missing the required parameter 'jerichoId' when calling getJerichoStats";
      }

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling getJerichoStats";
      }


      var pathParams = {
        'jerichoId': jerichoId,
        'teamId': teamId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = JerichoPerformance;

      return this.apiClient.callApi(
        '/team/{teamId}/jericho/{jerichoId}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubteams operation.
     * @callback module:api/TeamsApi~getSubteamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamPublicRepresentation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Subteams
     * Returns a collection of subteams for a parent team
     * @param {String} teamId The team id
     * @param {module:api/TeamsApi~getSubteamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamPublicRepresentation>}
     */
    this.getSubteams = function(teamId, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling getSubteams";
      }


      var pathParams = {
        'teamId': teamId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = [TeamPublicRepresentation];

      return this.apiClient.callApi(
        '/team/{teamId}/subteam', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queueJerichoSend operation.
     * @callback module:api/TeamsApi~queueJerichoSendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JerichoConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Jericho send.
     * Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
     * @param {module:model/JerichoConfiguration} config JSON representing a Jericho configuration
     * @param {String} teamId The ID of the team.
     * @param {module:api/TeamsApi~queueJerichoSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JerichoConfiguration}
     */
    this.queueJerichoSend = function(config, teamId, callback) {
      var postBody = config;

      // verify the required parameter 'config' is set
      if (config == undefined || config == null) {
        throw "Missing the required parameter 'config' when calling queueJerichoSend";
      }

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling queueJerichoSend";
      }


      var pathParams = {
        'teamId': teamId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JerichoConfiguration;

      return this.apiClient.callApi(
        '/team/{teamId}/jericho', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeMemberFromTeam operation.
     * @callback module:api/TeamsApi~removeMemberFromTeamCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Member from Team
     * Removes a member from a team.
     * @param {String} teamId The team id
     * @param {String} userId The user id of the member being removed.
     * @param {module:api/TeamsApi~removeMemberFromTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.removeMemberFromTeam = function(teamId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling removeMemberFromTeam";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling removeMemberFromTeam";
      }


      var pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/team/{teamId}/member/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJerichoPromptSend operation.
     * @callback module:api/TeamsApi~updateJerichoPromptSendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Jericho Prompt Settings
     * Updates the prompt settings based on the original email id
     * @param {String} teamId The team id
     * @param {String} jerichoId ID of the Jericho job
     * @param {module:api/TeamsApi~updateJerichoPromptSendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateJerichoPromptSend = function(teamId, jerichoId, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling updateJerichoPromptSend";
      }

      // verify the required parameter 'jerichoId' is set
      if (jerichoId == undefined || jerichoId == null) {
        throw "Missing the required parameter 'jerichoId' when calling updateJerichoPromptSend";
      }


      var pathParams = {
        'teamId': teamId,
        'jerichoId': jerichoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/team/{teamId}/jericho/{jerichoId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTeam operation.
     * @callback module:api/TeamsApi~updateTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamPublicRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a team
     * Update fields on a team
     * @param {String} teamId The team id
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The name of the team
     * @param {module:api/TeamsApi~updateTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamPublicRepresentation}
     */
    this.updateTeam = function(teamId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling updateTeam";
      }


      var pathParams = {
        'teamId': teamId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name']
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = TeamPublicRepresentation;

      return this.apiClient.callApi(
        '/team/{teamId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTeamMember operation.
     * @callback module:api/TeamsApi~updateTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Member of Team
     * Updates a member of a team
     * @param {String} teamId The team id
     * @param {String} userId The user id of the member being added to the team.
     * @param {Boolean} admin Set if the user is an admin of this team.
     * @param {module:api/TeamsApi~updateTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateTeamMember = function(teamId, userId, admin, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw "Missing the required parameter 'teamId' when calling updateTeamMember";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling updateTeamMember";
      }

      // verify the required parameter 'admin' is set
      if (admin == undefined || admin == null) {
        throw "Missing the required parameter 'admin' when calling updateTeamMember";
      }


      var pathParams = {
        'teamId': teamId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'userId': userId,
        'admin': admin
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/team/{teamId}/member', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
