/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.24005
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Bombbomb) {
      root.Bombbomb = {};
    }
    root.Bombbomb.SocialsApi = factory(root.Bombbomb.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Socials service.
   * @module api/SocialsApi
   * @version 2.0.24005
   */

  /**
   * Constructs a new SocialsApi. 
   * @alias module:api/SocialsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getSocialArticleProperties operation.
     * @callback module:api/SocialsApi~getSocialArticlePropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the social email properties
     * Gets the social email properties
     * @param {String} jerichoId associated jericho Id
     * @param {String} emailId This is the email Id for the email url
     * @param {String} originatorId This is the originator Id
     * @param {module:api/SocialsApi~getSocialArticlePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSocialArticleProperties = function(jerichoId, emailId, originatorId, callback) {
      var postBody = null;

      // verify the required parameter 'jerichoId' is set
      if (jerichoId == undefined || jerichoId == null) {
        throw "Missing the required parameter 'jerichoId' when calling getSocialArticleProperties";
      }

      // verify the required parameter 'emailId' is set
      if (emailId == undefined || emailId == null) {
        throw "Missing the required parameter 'emailId' when calling getSocialArticleProperties";
      }

      // verify the required parameter 'originatorId' is set
      if (originatorId == undefined || originatorId == null) {
        throw "Missing the required parameter 'originatorId' when calling getSocialArticleProperties";
      }


      var pathParams = {
      };
      var queryParams = {
        'jerichoId': jerichoId,
        'emailId': emailId,
        'originatorId': originatorId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSocialAutoShares operation.
     * @callback module:api/SocialsApi~getSocialAutoSharesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the auto shares from the client group assoc id
     * Gets the auto shares from the client group assoc id
     * @param {String} clientGroupId ID of the client group association
     * @param {module:api/SocialsApi~getSocialAutoSharesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSocialAutoShares = function(clientGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'clientGroupId' is set
      if (clientGroupId == undefined || clientGroupId == null) {
        throw "Missing the required parameter 'clientGroupId' when calling getSocialAutoShares";
      }


      var pathParams = {
      };
      var queryParams = {
        'clientGroupId': clientGroupId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSocialPermissions operation.
     * @callback module:api/SocialsApi~getSocialPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permissions for social integration
     * Get permissions for social integration and has redirect for user to login
     * @param {String} socialType Type of social integration
     * @param {module:api/SocialsApi~getSocialPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSocialPermissions = function(socialType, callback) {
      var postBody = null;

      // verify the required parameter 'socialType' is set
      if (socialType == undefined || socialType == null) {
        throw "Missing the required parameter 'socialType' when calling getSocialPermissions";
      }


      var pathParams = {
      };
      var queryParams = {
        'socialType': socialType
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSocialStatus operation.
     * @callback module:api/SocialsApi~getSocialStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the social state
     * Gets the social state
     * @param {String} originatorId associated originatorId
     * @param {module:api/SocialsApi~getSocialStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSocialStatus = function(originatorId, callback) {
      var postBody = null;

      // verify the required parameter 'originatorId' is set
      if (originatorId == undefined || originatorId == null) {
        throw "Missing the required parameter 'originatorId' when calling getSocialStatus";
      }


      var pathParams = {
      };
      var queryParams = {
        'originatorId': originatorId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/states', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSocialAutoShares operation.
     * @callback module:api/SocialsApi~updateSocialAutoSharesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the auto shares from the client group assoc id
     * Gets the auto shares from the client group assoc id
     * @param {String} autoShare The social share that will auto share to
     * @param {String} clientGroupId ID of the client group association
     * @param {module:api/SocialsApi~updateSocialAutoSharesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSocialAutoShares = function(autoShare, clientGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'autoShare' is set
      if (autoShare == undefined || autoShare == null) {
        throw "Missing the required parameter 'autoShare' when calling updateSocialAutoShares";
      }

      // verify the required parameter 'clientGroupId' is set
      if (clientGroupId == undefined || clientGroupId == null) {
        throw "Missing the required parameter 'clientGroupId' when calling updateSocialAutoShares";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'autoShare': autoShare,
        'clientGroupId': clientGroupId
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/shares', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSocialMessage operation.
     * @callback module:api/SocialsApi~updateSocialMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the users social message to what they typed in
     * Sets the users social message to what they typed in
     * @param {String} message The social message the user typed in
     * @param {String} originatorId The parent id tied to the social share
     * @param {module:api/SocialsApi~updateSocialMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSocialMessage = function(message, originatorId, callback) {
      var postBody = null;

      // verify the required parameter 'message' is set
      if (message == undefined || message == null) {
        throw "Missing the required parameter 'message' when calling updateSocialMessage";
      }

      // verify the required parameter 'originatorId' is set
      if (originatorId == undefined || originatorId == null) {
        throw "Missing the required parameter 'originatorId' when calling updateSocialMessage";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'message': message,
        'originatorId': originatorId
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/message', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSocialStatus operation.
     * @callback module:api/SocialsApi~updateSocialStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the social state for the object
     * Updates the social state for the object
     * @param {String} state The state to set to
     * @param {String} originatorId The parent id tied to the social share
     * @param {module:api/SocialsApi~updateSocialStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSocialStatus = function(state, originatorId, callback) {
      var postBody = null;

      // verify the required parameter 'state' is set
      if (state == undefined || state == null) {
        throw "Missing the required parameter 'state' when calling updateSocialStatus";
      }

      // verify the required parameter 'originatorId' is set
      if (originatorId == undefined || originatorId == null) {
        throw "Missing the required parameter 'originatorId' when calling updateSocialStatus";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'state': state,
        'originatorId': originatorId
      };

      var authNames = ['BBOAuth2'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/socials/state', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
