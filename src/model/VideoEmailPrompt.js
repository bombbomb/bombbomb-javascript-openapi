/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BombbombNodejsOpenapi) {
      root.BombbombNodejsOpenapi = {};
    }
    root.BombbombNodejsOpenapi.VideoEmailPrompt = factory(root.BombbombNodejsOpenapi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The VideoEmailPrompt model module.
   * @module model/VideoEmailPrompt
   * @version 2.0
   */

  /**
   * Constructs a new <code>VideoEmailPrompt</code>.
   * Configures a single prompt which asks a user to record a video into an outgoing email.
   * @alias module:model/VideoEmailPrompt
   * @class
   * @param emailSubjectLine {String} The subject line of the final email
   * @param emailContent {String} The HTML content of the final email
   * @param promptSubject {String} The prompt's subject line
   * @param promptHtml {String} The HTML body of the prompt
   * @param scheduledSendDate {Date} When the final email is scheduled to be sent
   */
  var exports = function(emailSubjectLine, emailContent, promptSubject, promptHtml, scheduledSendDate) {
    var _this = this;




    _this['emailSubjectLine'] = emailSubjectLine;
    _this['emailContent'] = emailContent;



    _this['promptSubject'] = promptSubject;
    _this['promptHtml'] = promptHtml;


    _this['scheduledSendDate'] = scheduledSendDate;





  };

  /**
   * Constructs a <code>VideoEmailPrompt</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VideoEmailPrompt} obj Optional instance to populate.
   * @return {module:model/VideoEmailPrompt} The populated <code>VideoEmailPrompt</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('userId')) {
        obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
      }
      if (data.hasOwnProperty('templateId')) {
        obj['templateId'] = ApiClient.convertToType(data['templateId'], 'String');
      }
      if (data.hasOwnProperty('emailSubjectLine')) {
        obj['emailSubjectLine'] = ApiClient.convertToType(data['emailSubjectLine'], 'String');
      }
      if (data.hasOwnProperty('emailContent')) {
        obj['emailContent'] = ApiClient.convertToType(data['emailContent'], 'String');
      }
      if (data.hasOwnProperty('toEmailAddresses')) {
        obj['toEmailAddresses'] = ApiClient.convertToType(data['toEmailAddresses'], ['String']);
      }
      if (data.hasOwnProperty('toLists')) {
        obj['toLists'] = ApiClient.convertToType(data['toLists'], ['String']);
      }
      if (data.hasOwnProperty('jerichoId')) {
        obj['jerichoId'] = ApiClient.convertToType(data['jerichoId'], 'String');
      }
      if (data.hasOwnProperty('promptSubject')) {
        obj['promptSubject'] = ApiClient.convertToType(data['promptSubject'], 'String');
      }
      if (data.hasOwnProperty('promptHtml')) {
        obj['promptHtml'] = ApiClient.convertToType(data['promptHtml'], 'String');
      }
      if (data.hasOwnProperty('sendWithoutVideo')) {
        obj['sendWithoutVideo'] = ApiClient.convertToType(data['sendWithoutVideo'], 'Boolean');
      }
      if (data.hasOwnProperty('videoDueDate')) {
        obj['videoDueDate'] = ApiClient.convertToType(data['videoDueDate'], 'Date');
      }
      if (data.hasOwnProperty('scheduledSendDate')) {
        obj['scheduledSendDate'] = ApiClient.convertToType(data['scheduledSendDate'], 'Date');
      }
      if (data.hasOwnProperty('videoId')) {
        obj['videoId'] = ApiClient.convertToType(data['videoId'], 'String');
      }
      if (data.hasOwnProperty('emailId')) {
        obj['emailId'] = ApiClient.convertToType(data['emailId'], 'String');
      }
      if (data.hasOwnProperty('jobId')) {
        obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'Integer');
      }
      if (data.hasOwnProperty('doNotApplyTemplate')) {
        obj['doNotApplyTemplate'] = ApiClient.convertToType(data['doNotApplyTemplate'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * The identifier of the prompt. Read Only.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The prompt's owner. Read Only.
   * @member {String} userId
   */
  exports.prototype['userId'] = undefined;
  /**
   * Optional. The email template to be used in the sent email, if none supplied, the users' default will be applied.
   * @member {String} templateId
   */
  exports.prototype['templateId'] = undefined;
  /**
   * The subject line of the final email
   * @member {String} emailSubjectLine
   */
  exports.prototype['emailSubjectLine'] = undefined;
  /**
   * The HTML content of the final email
   * @member {String} emailContent
   */
  exports.prototype['emailContent'] = undefined;
  /**
   * Email addresses to send the final email to, can be mixed with listIds.
   * @member {Array.<String>} toEmailAddresses
   */
  exports.prototype['toEmailAddresses'] = undefined;
  /**
   * List Ids to send the final email to
   * @member {Array.<String>} toLists
   */
  exports.prototype['toLists'] = undefined;
  /**
   * If sent in a jericho context, this will have the jericho id
   * @member {String} jerichoId
   */
  exports.prototype['jerichoId'] = undefined;
  /**
   * The prompt's subject line
   * @member {String} promptSubject
   */
  exports.prototype['promptSubject'] = undefined;
  /**
   * The HTML body of the prompt
   * @member {String} promptHtml
   */
  exports.prototype['promptHtml'] = undefined;
  /**
   * Whether to send the email if no video is recorded. If set to require a video, and none is added before the videoDueDate, the prompt is cancelled.
   * @member {Boolean} sendWithoutVideo
   */
  exports.prototype['sendWithoutVideo'] = undefined;
  /**
   * When the video must be recorded by
   * @member {Date} videoDueDate
   */
  exports.prototype['videoDueDate'] = undefined;
  /**
   * When the final email is scheduled to be sent
   * @member {Date} scheduledSendDate
   */
  exports.prototype['scheduledSendDate'] = undefined;
  /**
   * The video that was added to the prompt. Read Only.
   * @member {String} videoId
   */
  exports.prototype['videoId'] = undefined;
  /**
   * The email that was created by the prompt Read Only.
   * @member {String} emailId
   */
  exports.prototype['emailId'] = undefined;
  /**
   * The job sent by the prompt Read Only.
   * @member {String} jobId
   */
  exports.prototype['jobId'] = undefined;
  /**
   * The status of the prompt: created = 0, sent = 10, recorded = 20, job_created = 30, timed_out = 40, declined = 50 Read Only
   * @member {Integer} status
   */
  exports.prototype['status'] = undefined;
  /**
   * Controls whether a user template is applied to the message as it is sent
   * @member {Boolean} doNotApplyTemplate
   */
  exports.prototype['doNotApplyTemplate'] = undefined;



  return exports;
}));


